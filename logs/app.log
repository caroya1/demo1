2025-06-17 00:53:49.664 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 00:53:50.311 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 00:53:50.327 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 00:53:50.398 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 41264 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 00:53:50.402 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 00:53:50.404 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:53:50.864 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 00:53:50.911 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 38472 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 00:53:50.914 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 00:53:50.914 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:53:51.844 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 00:53:51.862 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 00:53:51.864 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 00:53:51.864 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 00:53:51.932 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 00:53:51.932 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1468 ms
2025-06-17 00:53:52.071 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 00:53:52.082 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 00:53:52.084 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 00:53:52.084 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 00:53:52.093 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@5396eeb1, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 00:53:52.094 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 00:53:52.137 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 00:53:52.138 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1178 ms
2025-06-17 00:53:52.280 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@5e85c21b, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 00:53:52.281 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 00:53:52.960 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: d91241be-1439-4cff-9a10-792051d089df

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 00:53:52.968 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 00:53:53.108 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: 5e869b74-421c-49b8-b994-f7401a71ae2c

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 00:53:53.113 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 00:53:53.217 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 00:53:53.237 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 00:53:53.245 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 3.462 seconds (process running for 5.652)
2025-06-17 00:53:53.248 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 00:53:53.376 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 00:53:53.380 [main] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-17 00:53:53.391 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-17 00:53:53.406 [main] ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-17 00:53:53.408 [main] ERROR com.example.demo.Demo1Application - 应用程序启动失败: Failed to start bean 'webServerStartStop'
org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:408) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:394) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:586) ~[spring-context-6.2.7.jar:6.2.7]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:364) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:310) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:1006) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:630) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1362) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1351) ~[spring-boot-3.5.0.jar:3.5.0]
	at com.example.demo.Demo1Application.main(Demo1Application.java:16) [classes/:?]
Caused by: org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use
	at org.springframework.boot.web.server.PortInUseException.lambda$throwIfPortBindingException$0(PortInUseException.java:71) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.lambda$ifPortBindingException$1(PortInUseException.java:86) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifCausedBy(PortInUseException.java:104) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifPortBindingException(PortInUseException.java:83) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.throwIfPortBindingException(PortInUseException.java:70) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:250) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.lang.IllegalArgumentException: standardService.connector.startFailed
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:222) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1082) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.net.BindException: Address already in use: bind
	at java.base/sun.nio.ch.Net.bind0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.bind(Net.java:555) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.netBind(ServerSocketChannelImpl.java:337) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:294) ~[?:?]
	at org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:240) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1304) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1390) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:644) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1079) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
2025-06-17 00:55:19.227 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-17 00:55:19.869 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-17 00:55:25.920 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 00:55:26.325 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 00:55:26.366 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 38424 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 00:55:26.369 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 00:55:26.370 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:55:27.392 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 00:55:27.403 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 00:55:27.404 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 00:55:27.404 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 00:55:27.453 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 00:55:27.453 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1052 ms
2025-06-17 00:55:27.590 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@22d477c2, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 00:55:27.592 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 00:55:28.401 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: 9da7c3f3-ea01-41dc-aa2c-3b02fa42cfce

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 00:55:28.406 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 00:55:28.593 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 00:55:28.610 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 00:55:28.617 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.619 seconds (process running for 3.669)
2025-06-17 00:55:28.619 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 00:55:45.227 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 00:55:45.227 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 00:55:45.228 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 00:55:45.298 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 00:55:45.298 [http-nio-8080-exec-1] INFO  com.example.demo.service.UserService - 开始用户登录流程: username=user
2025-06-17 00:55:45.364 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 00:55:45.483 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@75ff72c9
2025-06-17 00:55:45.484 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 00:55:45.560 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 00:55:45.622 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - JWT token生成成功: username=user, expiryDate=2025-06-18T00:55:45.561+0800
2025-06-17 00:55:45.623 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 为用户生成登录token: username=user
2025-06-17 00:55:45.623 [http-nio-8080-exec-1] INFO  com.example.demo.service.UserService - 用户登录成功: username=user, userId=2
2025-06-17 00:55:45.623 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user
2025-06-17 00:57:53.605 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 00:57:53.606 [http-nio-8080-exec-5] INFO  com.example.demo.service.UserService - 开始用户登录流程: username=user
2025-06-17 00:57:53.611 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 00:57:53.612 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - JWT token生成成功: username=user, expiryDate=2025-06-18T00:57:53.611+0800
2025-06-17 00:57:53.613 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 为用户生成登录token: username=user
2025-06-17 00:57:53.613 [http-nio-8080-exec-5] INFO  com.example.demo.service.UserService - 用户登录成功: username=user, userId=2
2025-06-17 00:57:53.613 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user
2025-06-17 00:58:19.034 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 00:58:19.035 [http-nio-8080-exec-3] INFO  com.example.demo.service.UserService - 开始用户登录流程: username=user
2025-06-17 00:58:19.039 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 00:58:19.040 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - JWT token生成成功: username=user, expiryDate=2025-06-18T00:58:19.039+0800
2025-06-17 00:58:19.040 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 为用户生成登录token: username=user
2025-06-17 00:58:19.040 [http-nio-8080-exec-3] INFO  com.example.demo.service.UserService - 用户登录成功: username=user, userId=2
2025-06-17 00:58:19.041 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user
2025-06-17 01:01:58.747 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-17 01:01:59.783 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-17 01:01:59.791 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 01:01:59.799 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 01:02:06.190 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 01:02:06.626 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 01:02:06.657 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 29272 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 01:02:06.660 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 01:02:06.660 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 01:02:07.599 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 01:02:07.611 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 01:02:07.612 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 01:02:07.612 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 01:02:07.670 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 01:02:07.671 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 983 ms
2025-06-17 01:02:07.827 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@590d6c76, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 01:02:07.828 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 01:02:08.563 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: 83d3fb7b-c784-4d5f-b9f1-ee1120014645

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 01:02:08.568 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 01:02:08.741 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 01:02:08.754 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 01:02:08.761 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.503 seconds (process running for 3.539)
2025-06-17 01:02:08.763 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 01:02:17.308 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 01:02:17.308 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 01:02:17.309 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 01:02:17.367 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:02:17.368 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:02:17.423 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 01:02:17.542 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@493ee39b
2025-06-17 01:02:17.544 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 01:02:17.613 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:02:17.613 [http-nio-8080-exec-1] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:02:17.647 [http-nio-8080-exec-1] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:02:17.647 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:02:28.751 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:02:28.752 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:02:28.759 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:02:28.759 [http-nio-8080-exec-2] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:02:28.761 [http-nio-8080-exec-2] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:02:28.761 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:03:01.505 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:03:01.505 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:03:01.510 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:03:01.511 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:03:01.511 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:03:01.512 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:05:44.834 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:05:44.834 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:05:44.839 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:05:44.839 [http-nio-8080-exec-8] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:05:44.840 [http-nio-8080-exec-8] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:05:44.840 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:05:44.869 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:05:44.869 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:05:44.884 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:05:44.884 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:05:44.885 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:05:44.885 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:05:44.885 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:05:44.889 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:05:44.889 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:09:11.523 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-17 01:09:12.138 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-17 01:09:12.144 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 01:09:12.152 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 01:09:19.716 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 01:09:20.044 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 01:09:20.083 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 15300 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 01:09:20.085 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 01:09:20.085 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 01:09:21.143 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 01:09:21.157 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 01:09:21.159 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 01:09:21.159 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 01:09:21.236 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 01:09:21.236 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1116 ms
2025-06-17 01:09:21.399 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@5e85c21b, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 01:09:21.405 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 01:09:22.251 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: 8c4978f7-e970-4e35-9be4-8da40b514173

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 01:09:22.259 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 01:09:22.491 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 01:09:22.514 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 01:09:22.524 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.742 seconds (process running for 3.837)
2025-06-17 01:09:22.528 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 01:09:24.207 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 01:09:24.207 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 01:09:24.208 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-17 01:09:24.335 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 01:09:24.500 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@59927a07
2025-06-17 01:09:24.502 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 01:17:01.311 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:01.311 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:01.431 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:01.432 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:01.435 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:01.435 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:01.435 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:01.462 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:01.462 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:17:25.395 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:25.396 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:25.399 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:25.400 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:25.403 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:25.403 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:25.404 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:25.407 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:25.407 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:17:35.888 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:35.888 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.890 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:35.891 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.892 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:35.892 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:35.892 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:35.896 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:35.896 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:17:35.955 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:35.955 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.959 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:35.959 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.963 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:35.963 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:35.963 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:35.967 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:35.967 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:25:31.572 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:25:31.574 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:25:31.574 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 用户退出登录: username=user
2025-06-17 08:58:30.562 [HikariPool-1:housekeeper] WARN  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Thread starvation or clock leap detected (housekeeper delta=7h33m9s275ms885µs200ns).
2025-06-17 12:06:44.224 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 12:06:44.229 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 12:06:44.311 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 12:06:44.312 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 12:06:44.387 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:44.387 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 12:06:44.418 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:44.418 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:44.423 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:44.424 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:44.427 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:44.427 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:44.427 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:44.431 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:44.431 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:47.309 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:47.309 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.312 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:47.312 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.314 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:47.314 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:47.314 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:47.318 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:47.318 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:47.911 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:47.911 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.914 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:47.914 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.917 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:47.918 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:47.919 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:47.923 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:47.923 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:51.066 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:51.066 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.070 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:51.070 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.072 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:51.072 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:51.073 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:51.076 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:51.076 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:51.132 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:51.133 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.135 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:51.136 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.138 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:51.138 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:51.138 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:51.142 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:51.142 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:13:27.948 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:13:27.952 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:27.966 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:13:27.967 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:27.971 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:13:27.971 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:13:27.972 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:13:27.992 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:13:27.993 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:13:43.980 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:13:43.980 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:43.984 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:13:43.985 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:43.987 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:13:43.987 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:13:43.988 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:13:43.994 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:13:43.994 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:16.055 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-17 12:22:17.140 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-17 12:22:17.166 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 12:22:17.176 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 12:22:23.565 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:22:23.935 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 12:22:23.972 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 36236 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:22:23.975 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:22:23.976 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:22:24.841 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 12:22:24.851 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 12:22:24.853 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 12:22:24.853 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 12:22:24.902 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 12:22:24.903 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 888 ms
2025-06-17 12:22:25.039 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@6df4af5, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 12:22:25.040 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 12:22:25.800 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: 87e0d79f-c40e-4ce7-8be2-196c756de4ca

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 12:22:25.804 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 12:22:25.987 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 12:22:26.001 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 12:22:26.008 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.375 seconds (process running for 3.577)
2025-06-17 12:22:26.011 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:22:31.482 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 12:22:31.483 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 12:22:31.483 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 0 ms
2025-06-17 12:22:31.509 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:22:31.509 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:31.555 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:22:31.555 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:31.557 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:31.557 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:22:31.557 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:31.620 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 12:22:31.757 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@10d7af8f
2025-06-17 12:22:31.759 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 12:22:31.808 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:31.809 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:31.933 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:31.937 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:31.937 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:22:31.937 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:31.942 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:31.969 [http-nio-8080-exec-2] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 12:22:34.654 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:34.657 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:34.664 [http-nio-8080-exec-9] DEBUG com.example.demo.service.CartService - 添加商品到购物车: username=user, productId=4, quantity=1
2025-06-17 12:22:34.664 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:34.669 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:34.706 [http-nio-8080-exec-9] DEBUG com.example.demo.service.CartService - 新增购物车商品: userId=2, productId=4, quantity=1
2025-06-17 12:22:34.715 [http-nio-8080-exec-9] INFO  com.example.demo.controller.CartController - 添加商品到购物车成功: username=user, productId=4, quantity=1
2025-06-17 12:22:34.724 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:34.727 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:34.727 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:22:34.727 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:34.731 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:34.734 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:22:36.357 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:22:36.357 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.359 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:22:36.359 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.361 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:36.361 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:22:36.362 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:36.366 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:36.366 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:36.414 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:22:36.415 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.418 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:22:36.418 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.422 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:36.422 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:22:36.422 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:36.426 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:36.426 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:36.443 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.446 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:36.446 [http-nio-8080-exec-5] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:22:36.446 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:36.451 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:36.454 [http-nio-8080-exec-5] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:27:51.365 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:27:51.365 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:27:51.368 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:27:51.368 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:27:51.370 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:27:51.370 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:27:51.370 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:27:51.376 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:27:51.376 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:27:51.405 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:27:51.408 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:27:51.408 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:27:51.408 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:27:51.414 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:27:51.417 [http-nio-8080-exec-2] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:28:43.453 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:28:43.453 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:28:43.456 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:28:43.456 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:28:43.460 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:28:43.460 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:28:43.460 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:28:43.464 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:28:43.465 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:28:43.488 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:28:43.492 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:28:43.492 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:28:43.492 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:28:43.497 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:28:43.500 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:29:39.799 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:29:39.799 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:29:39.802 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:29:39.802 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:29:39.804 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:29:39.804 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:29:39.804 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:29:39.808 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:29:39.809 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:29:39.839 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:29:39.842 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:29:39.842 [http-nio-8080-exec-8] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:29:39.842 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:29:39.846 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:29:39.849 [http-nio-8080-exec-8] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:37:43.955 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-17 12:37:44.893 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-17 12:37:44.902 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 12:37:44.918 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 12:37:50.839 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:37:51.199 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 12:37:51.239 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 43932 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:37:51.241 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:37:51.242 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:37:52.149 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 12:37:52.161 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 12:37:52.162 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 12:37:52.162 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 12:37:52.222 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 12:37:52.223 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 947 ms
2025-06-17 12:37:52.356 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@8c0a23f, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 12:37:52.357 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 12:37:53.031 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: fff00ca5-b4ed-477b-9023-89006b6a3f90

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 12:37:53.037 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 12:37:53.219 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 12:37:53.234 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 12:37:53.241 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.329 seconds (process running for 3.453)
2025-06-17 12:37:53.244 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:50:13.230 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 12:50:13.230 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 12:50:13.232 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 12:50:13.295 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:50:13.296 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.397 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:50:13.397 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.398 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:50:13.398 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:50:13.399 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.399 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.401 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:13.401 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:50:13.401 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:13.402 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:13.402 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:50:13.402 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:13.538 [http-nio-8080-exec-3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 12:50:13.839 [http-nio-8080-exec-3] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@a38542e
2025-06-17 12:50:13.841 [http-nio-8080-exec-3] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 12:50:13.941 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:13.941 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:13.942 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:50:13.942 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:50:14.028 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.029 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.031 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.031 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:50:14.031 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.031 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.032 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.039 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.039 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.046 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.046 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.050 [http-nio-8080-exec-5] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=0
2025-06-17 12:50:14.050 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.051 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.051 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.051 [http-nio-8080-exec-7] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:50:14.051 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.055 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:50:14.056 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.059 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.060 [http-nio-8080-exec-8] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=0
2025-06-17 12:50:14.064 [http-nio-8080-exec-7] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:50:18.875 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-17 12:50:20.924 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-17 12:50:20.937 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown initiated...
2025-06-17 12:50:20.977 [SpringApplicationShutdownHook] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Shutdown completed.
2025-06-17 12:50:27.119 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:50:27.535 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 12:50:27.588 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 36136 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:50:27.591 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:50:27.592 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:50:29.039 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 12:50:29.055 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 12:50:29.056 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 12:50:29.057 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 12:50:29.134 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 12:50:29.135 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1499 ms
2025-06-17 12:50:29.373 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@34045582, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 12:50:29.374 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 12:50:29.632 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:50:30.017 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 12:50:30.081 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 42632 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:50:30.085 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:50:30.086 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:50:30.678 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: 17e62a8b-b00e-43df-95b7-342c5ab67798

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 12:50:30.683 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 12:50:30.886 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 12:50:30.904 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 12:50:30.911 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 3.721 seconds (process running for 4.739)
2025-06-17 12:50:30.914 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:50:31.088 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 12:50:31.098 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 12:50:31.100 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 12:50:31.100 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 12:50:31.154 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 12:50:31.154 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 1016 ms
2025-06-17 12:50:31.307 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@1edccfd4, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 12:50:31.308 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 12:50:32.025 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: c6d8cfcb-793c-4f63-87ce-065202cd1bd8

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 12:50:32.029 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 12:50:32.197 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 12:50:32.201 [main] WARN  org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext - Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
2025-06-17 12:50:32.210 [main] INFO  org.springframework.boot.autoconfigure.logging.ConditionEvaluationReportLogger - 

Error starting ApplicationContext. To display the condition evaluation report re-run your application with 'debug' enabled.
2025-06-17 12:50:32.224 [main] ERROR org.springframework.boot.diagnostics.LoggingFailureAnalysisReporter - 

***************************
APPLICATION FAILED TO START
***************************

Description:

Web server failed to start. Port 8080 was already in use.

Action:

Identify and stop the process that's listening on port 8080 or configure this application to listen on another port.

2025-06-17 12:50:32.226 [main] ERROR com.example.demo.Demo1Application - 应用程序启动失败: Failed to start bean 'webServerStartStop'
org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:408) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:394) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:586) ~[spring-context-6.2.7.jar:6.2.7]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:364) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:310) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:1006) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:630) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1362) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1351) ~[spring-boot-3.5.0.jar:3.5.0]
	at com.example.demo.Demo1Application.main(Demo1Application.java:16) [classes/:?]
Caused by: org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use
	at org.springframework.boot.web.server.PortInUseException.lambda$throwIfPortBindingException$0(PortInUseException.java:71) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.lambda$ifPortBindingException$1(PortInUseException.java:86) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifCausedBy(PortInUseException.java:104) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifPortBindingException(PortInUseException.java:83) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.throwIfPortBindingException(PortInUseException.java:70) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:250) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.lang.IllegalArgumentException: standardService.connector.startFailed
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:222) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1082) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.net.BindException: Address already in use: bind
	at java.base/sun.nio.ch.Net.bind0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.bind(Net.java:555) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.netBind(ServerSocketChannelImpl.java:337) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:294) ~[?:?]
	at org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:240) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1304) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1390) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:644) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1079) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
2025-06-17 12:50:34.614 [SpringApplicationShutdownHook] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Commencing graceful shutdown. Waiting for active requests to complete
2025-06-17 12:50:35.088 [tomcat-shutdown] INFO  org.springframework.boot.web.embedded.tomcat.GracefulShutdown - Graceful shutdown complete
2025-06-17 12:50:47.402 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:50:47.675 [background-preinit] INFO  org.hibernate.validator.internal.util.Version - HV000001: Hibernate Validator 8.0.2.Final
2025-06-17 12:50:47.710 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 43228 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:50:47.711 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:50:47.712 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:50:48.437 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port 8080 (http)
2025-06-17 12:50:48.446 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8080"]
2025-06-17 12:50:48.446 [main] INFO  org.apache.catalina.core.StandardService - Starting service [Tomcat]
2025-06-17 12:50:48.446 [main] INFO  org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/10.1.41]
2025-06-17 12:50:48.499 [main] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
2025-06-17 12:50:48.499 [main] INFO  org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext - Root WebApplicationContext: initialization completed in 760 ms
2025-06-17 12:50:48.626 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Registered plugin: 'MybatisPlusInterceptor{interceptors=[PaginationInnerInterceptor(logger=org.apache.ibatis.logging.slf4j.Slf4jImpl@10f405ff, overflow=false, maxLimit=null, dbType=MYSQL, dialect=null, optimizeJoin=true)]}'
2025-06-17 12:50:48.627 [main] DEBUG com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean - Property 'mapperLocations' was not specified.
2025-06-17 12:50:49.305 [main] WARN  org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration - 

Using generated security password: 139a1287-8aa7-4b52-b708-4f718b4510d9

This generated password is for development use only. Your security configuration must be updated before running your application in production.

2025-06-17 12:50:49.309 [main] INFO  org.springframework.security.config.annotation.authentication.configuration.InitializeUserDetailsBeanManagerConfigurer$InitializeUserDetailsManagerConfigurer - Global AuthenticationManager configured with UserDetailsService bean with name inMemoryUserDetailsManager
2025-06-17 12:50:49.481 [main] INFO  org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8080"]
2025-06-17 12:50:49.495 [main] INFO  org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port 8080 (http) with context path '/'
2025-06-17 12:50:49.505 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.051 seconds (process running for 2.84)
2025-06-17 12:50:49.507 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:51:02.062 [http-nio-8080-exec-1] INFO  org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
2025-06-17 12:51:02.062 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
2025-06-17 12:51:02.063 [http-nio-8080-exec-1] INFO  org.springframework.web.servlet.DispatcherServlet - Completed initialization in 1 ms
2025-06-17 12:51:02.155 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:02.203 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:02.209 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Starting...
2025-06-17 12:51:02.343 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.pool.HikariPool - HikariPool-1 - Added connection com.mysql.cj.jdbc.ConnectionImpl@24272950
2025-06-17 12:51:02.345 [http-nio-8080-exec-1] INFO  com.zaxxer.hikari.HikariDataSource - HikariPool-1 - Start completed.
2025-06-17 12:51:02.350 [http-nio-8080-exec-1] INFO  com.example.demo.service.OrderService - 开始购物车结算: username=user
2025-06-17 12:51:02.351 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:02.503 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:02.503 [http-nio-8080-exec-1] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:51:02.503 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:02.504 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:02.514 [http-nio-8080-exec-1] ERROR com.example.demo.controller.OrderController - 购物车结算失败: 余额不足，当前余额：100.00，需要支付：399.00
java.lang.RuntimeException: 余额不足，当前余额：100.00，需要支付：399.00
	at com.example.demo.service.OrderService.checkoutFromCart(OrderService.java:64) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.OrderService$$SpringCGLIB$$0.checkoutFromCart(<generated>) ~[classes/:?]
	at com.example.demo.controller.OrderController.checkout(OrderController.java:34) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
2025-06-17 12:51:17.234 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.237 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.239 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 开始购物车结算: username=user
2025-06-17 12:51:17.240 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.243 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.243 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:51:17.244 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.244 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.276 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 订单创建成功: orderNumber=ORD20250617125117759, totalAmount=399.00
2025-06-17 12:51:17.292 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 扣除用户余额: username=user, 扣除金额=399.00, 剩余余额=101.00
2025-06-17 12:51:17.299 [http-nio-8080-exec-2] DEBUG com.example.demo.service.OrderService - 减少商品库存: productId=4, 减少数量=1, 剩余库存=79
2025-06-17 12:51:17.300 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 清空购物车: username=user
2025-06-17 12:51:17.300 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.303 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.307 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 清空购物车成功: userId=2
2025-06-17 12:51:17.308 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 清空购物车: username=user
2025-06-17 12:51:17.311 [http-nio-8080-exec-2] INFO  com.example.demo.controller.OrderController - 购物车结算成功: username=user, orderNumber=ORD20250617125117759
2025-06-17 12:51:17.330 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:51:17.331 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.333 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:51:17.334 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.335 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.336 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:51:17.336 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.340 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.340 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:51:17.355 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.357 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.358 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:51:17.358 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.361 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.364 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 12:51:17.380 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.382 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.382 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.387 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.390 [http-nio-8080-exec-9] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
