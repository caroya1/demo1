2025-06-17 00:53:49.664 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 00:53:50.327 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 00:53:50.398 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 41264 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 00:53:50.402 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 00:53:50.404 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:53:50.911 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 38472 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 00:53:50.914 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 00:53:50.914 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:53:53.245 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 3.462 seconds (process running for 5.652)
2025-06-17 00:53:53.248 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 00:53:53.408 [main] ERROR com.example.demo.Demo1Application - 应用程序启动失败: Failed to start bean 'webServerStartStop'
org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:408) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:394) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:586) ~[spring-context-6.2.7.jar:6.2.7]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:364) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:310) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:1006) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:630) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1362) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1351) ~[spring-boot-3.5.0.jar:3.5.0]
	at com.example.demo.Demo1Application.main(Demo1Application.java:16) [classes/:?]
Caused by: org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use
	at org.springframework.boot.web.server.PortInUseException.lambda$throwIfPortBindingException$0(PortInUseException.java:71) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.lambda$ifPortBindingException$1(PortInUseException.java:86) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifCausedBy(PortInUseException.java:104) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifPortBindingException(PortInUseException.java:83) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.throwIfPortBindingException(PortInUseException.java:70) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:250) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.lang.IllegalArgumentException: standardService.connector.startFailed
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:222) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1082) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.net.BindException: Address already in use: bind
	at java.base/sun.nio.ch.Net.bind0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.bind(Net.java:555) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.netBind(ServerSocketChannelImpl.java:337) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:294) ~[?:?]
	at org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:240) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1304) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1390) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:644) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1079) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
2025-06-17 00:55:25.920 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 00:55:26.366 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 38424 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 00:55:26.369 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 00:55:26.370 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 00:55:28.617 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.619 seconds (process running for 3.669)
2025-06-17 00:55:28.619 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 00:55:45.298 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 00:55:45.298 [http-nio-8080-exec-1] INFO  com.example.demo.service.UserService - 开始用户登录流程: username=user
2025-06-17 00:55:45.560 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 00:55:45.622 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - JWT token生成成功: username=user, expiryDate=2025-06-18T00:55:45.561+0800
2025-06-17 00:55:45.623 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 为用户生成登录token: username=user
2025-06-17 00:55:45.623 [http-nio-8080-exec-1] INFO  com.example.demo.service.UserService - 用户登录成功: username=user, userId=2
2025-06-17 00:55:45.623 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user
2025-06-17 00:57:53.605 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 00:57:53.606 [http-nio-8080-exec-5] INFO  com.example.demo.service.UserService - 开始用户登录流程: username=user
2025-06-17 00:57:53.611 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 00:57:53.612 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - JWT token生成成功: username=user, expiryDate=2025-06-18T00:57:53.611+0800
2025-06-17 00:57:53.613 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 为用户生成登录token: username=user
2025-06-17 00:57:53.613 [http-nio-8080-exec-5] INFO  com.example.demo.service.UserService - 用户登录成功: username=user, userId=2
2025-06-17 00:57:53.613 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user
2025-06-17 00:58:19.034 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 00:58:19.035 [http-nio-8080-exec-3] INFO  com.example.demo.service.UserService - 开始用户登录流程: username=user
2025-06-17 00:58:19.039 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 00:58:19.040 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - JWT token生成成功: username=user, expiryDate=2025-06-18T00:58:19.039+0800
2025-06-17 00:58:19.040 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 为用户生成登录token: username=user
2025-06-17 00:58:19.040 [http-nio-8080-exec-3] INFO  com.example.demo.service.UserService - 用户登录成功: username=user, userId=2
2025-06-17 00:58:19.041 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user
2025-06-17 01:02:06.190 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 01:02:06.657 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 29272 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 01:02:06.660 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 01:02:06.660 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 01:02:08.761 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.503 seconds (process running for 3.539)
2025-06-17 01:02:08.763 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 01:02:17.367 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:02:17.368 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:02:17.613 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:02:17.613 [http-nio-8080-exec-1] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:02:17.647 [http-nio-8080-exec-1] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:02:17.647 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:02:28.751 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:02:28.752 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:02:28.759 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:02:28.759 [http-nio-8080-exec-2] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:02:28.761 [http-nio-8080-exec-2] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:02:28.761 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:03:01.505 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:03:01.505 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:03:01.510 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:03:01.511 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:03:01.511 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:03:01.512 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:05:44.834 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 01:05:44.834 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 01:05:44.839 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 01:05:44.839 [http-nio-8080-exec-8] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 01:05:44.840 [http-nio-8080-exec-8] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:05:44.840 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 01:05:44.869 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:05:44.869 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:05:44.884 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:05:44.884 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:05:44.885 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:05:44.885 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:05:44.885 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:05:44.889 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:05:44.889 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:09:19.716 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 01:09:20.083 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 15300 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 01:09:20.085 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 01:09:20.085 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 01:09:22.524 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.742 seconds (process running for 3.837)
2025-06-17 01:09:22.528 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 01:17:01.311 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:01.311 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:01.431 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:01.432 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:01.435 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:01.435 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:01.435 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:01.462 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:01.462 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:17:25.395 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:25.396 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:25.399 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:25.400 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:25.403 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:25.403 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:25.404 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:25.407 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:25.407 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:17:35.888 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:35.888 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.890 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:35.891 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.892 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:35.892 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:35.892 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:35.896 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:35.896 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:17:35.955 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 01:17:35.955 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.959 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T01:05:44.000+0800
2025-06-17 01:17:35.959 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:17:35.963 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:17:35.963 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 01:17:35.963 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 01:17:35.967 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 01:17:35.967 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 01:25:31.572 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 01:25:31.574 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 01:25:31.574 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 用户退出登录: username=user
2025-06-17 12:06:44.224 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录请求: username=user
2025-06-17 12:06:44.229 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 验证用户登录: username=user
2025-06-17 12:06:44.311 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 用户验证成功: username=user, userId=2
2025-06-17 12:06:44.312 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - 开始生成JWT token: username=user
2025-06-17 12:06:44.387 [http-nio-8080-exec-5] INFO  com.example.demo.config.JwtUtils - JWT token生成成功: username=user, token前缀=eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:44.387 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 用户登录成功: username=user, userId=2
2025-06-17 12:06:44.418 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:44.418 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:44.423 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:44.424 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:44.427 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:44.427 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:44.427 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:44.431 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:44.431 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:47.309 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:47.309 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.312 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:47.312 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.314 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:47.314 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:47.314 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:47.318 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:47.318 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:47.911 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:47.911 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.914 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:47.914 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:47.917 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:47.918 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:47.919 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:47.923 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:47.923 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:51.066 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:51.066 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.070 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:51.070 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.072 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:51.072 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:51.073 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:51.076 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:51.076 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:06:51.132 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:06:51.133 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.135 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:06:51.136 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:06:51.138 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:06:51.138 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:06:51.138 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:06:51.142 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:06:51.142 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:13:27.948 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:13:27.952 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:27.966 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:13:27.967 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:27.971 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:13:27.971 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:13:27.972 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:13:27.992 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:13:27.993 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:13:43.980 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:13:43.980 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:43.984 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:13:43.985 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:13:43.987 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:13:43.987 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:13:43.988 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:13:43.994 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:13:43.994 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:23.565 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:22:23.972 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 36236 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:22:23.975 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:22:23.976 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:22:26.008 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.375 seconds (process running for 3.577)
2025-06-17 12:22:26.011 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:22:31.509 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:22:31.509 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:31.555 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:22:31.555 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:31.557 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:31.557 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:22:31.557 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:31.808 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:31.809 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:31.933 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:31.937 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:31.937 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:22:31.937 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:31.942 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:31.969 [http-nio-8080-exec-2] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 12:22:34.654 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:34.657 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:34.664 [http-nio-8080-exec-9] DEBUG com.example.demo.service.CartService - 添加商品到购物车: username=user, productId=4, quantity=1
2025-06-17 12:22:34.664 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:34.669 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:34.706 [http-nio-8080-exec-9] DEBUG com.example.demo.service.CartService - 新增购物车商品: userId=2, productId=4, quantity=1
2025-06-17 12:22:34.715 [http-nio-8080-exec-9] INFO  com.example.demo.controller.CartController - 添加商品到购物车成功: username=user, productId=4, quantity=1
2025-06-17 12:22:34.724 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:34.727 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:34.727 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:22:34.727 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:34.731 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:34.734 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:22:36.357 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:22:36.357 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.359 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:22:36.359 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.361 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:36.361 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:22:36.362 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:36.366 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:36.366 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:36.414 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:22:36.415 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.418 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:22:36.418 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.422 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:36.422 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:22:36.422 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:36.426 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:36.426 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:22:36.443 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:22:36.446 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:22:36.446 [http-nio-8080-exec-5] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:22:36.446 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:22:36.451 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:22:36.454 [http-nio-8080-exec-5] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:27:51.365 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:27:51.365 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:27:51.368 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:27:51.368 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:27:51.370 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:27:51.370 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:27:51.370 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:27:51.376 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:27:51.376 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:27:51.405 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:27:51.408 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:27:51.408 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:27:51.408 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:27:51.414 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:27:51.417 [http-nio-8080-exec-2] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:28:43.453 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:28:43.453 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:28:43.456 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:28:43.456 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:28:43.460 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:28:43.460 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:28:43.460 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:28:43.464 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:28:43.465 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:28:43.488 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:28:43.492 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:28:43.492 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:28:43.492 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:28:43.497 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:28:43.500 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:29:39.799 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:29:39.799 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:29:39.802 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:29:39.802 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:29:39.804 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:29:39.804 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:29:39.804 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:29:39.808 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:29:39.809 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:29:39.839 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:29:39.842 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:29:39.842 [http-nio-8080-exec-8] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:29:39.842 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:29:39.846 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:29:39.849 [http-nio-8080-exec-8] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:37:50.839 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:37:51.239 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 43932 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:37:51.241 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:37:51.242 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:37:53.241 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.329 seconds (process running for 3.453)
2025-06-17 12:37:53.244 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:50:13.295 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:50:13.296 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.397 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:50:13.397 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.398 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:50:13.398 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:50:13.399 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.399 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:13.401 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:13.401 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:50:13.401 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:13.402 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:13.402 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:50:13.402 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:13.941 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:13.941 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:13.942 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:50:13.942 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:50:14.028 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.029 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.031 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.031 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:50:14.031 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.031 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.032 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.039 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.039 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.046 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.046 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:50:14.050 [http-nio-8080-exec-5] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=0
2025-06-17 12:50:14.050 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.051 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.051 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:50:14.051 [http-nio-8080-exec-7] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:50:14.051 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:50:14.055 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:50:14.056 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.059 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:50:14.060 [http-nio-8080-exec-8] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=0
2025-06-17 12:50:14.064 [http-nio-8080-exec-7] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=1
2025-06-17 12:50:27.119 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:50:27.588 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 36136 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:50:27.591 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:50:27.592 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:50:29.632 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:50:30.081 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 42632 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:50:30.085 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:50:30.086 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:50:30.911 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 3.721 seconds (process running for 4.739)
2025-06-17 12:50:30.914 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:50:32.226 [main] ERROR com.example.demo.Demo1Application - 应用程序启动失败: Failed to start bean 'webServerStartStop'
org.springframework.context.ApplicationContextException: Failed to start bean 'webServerStartStop'
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:408) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:394) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:586) ~[spring-context-6.2.7.jar:6.2.7]
	at java.base/java.lang.Iterable.forEach(Iterable.java:75) ~[?:?]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:364) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:310) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:1006) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:630) ~[spring-context-6.2.7.jar:6.2.7]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:753) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:318) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1362) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1351) ~[spring-boot-3.5.0.jar:3.5.0]
	at com.example.demo.Demo1Application.main(Demo1Application.java:16) [classes/:?]
Caused by: org.springframework.boot.web.server.PortInUseException: Port 8080 is already in use
	at org.springframework.boot.web.server.PortInUseException.lambda$throwIfPortBindingException$0(PortInUseException.java:71) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.lambda$ifPortBindingException$1(PortInUseException.java:86) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifCausedBy(PortInUseException.java:104) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.ifPortBindingException(PortInUseException.java:83) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.server.PortInUseException.throwIfPortBindingException(PortInUseException.java:70) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:250) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.lang.IllegalArgumentException: standardService.connector.startFailed
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:222) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: org.apache.catalina.LifecycleException: Protocol handler start failed
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1082) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
Caused by: java.net.BindException: Address already in use: bind
	at java.base/sun.nio.ch.Net.bind0(Native Method) ~[?:?]
	at java.base/sun.nio.ch.Net.bind(Net.java:555) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.netBind(ServerSocketChannelImpl.java:337) ~[?:?]
	at java.base/sun.nio.ch.ServerSocketChannelImpl.bind(ServerSocketChannelImpl.java:294) ~[?:?]
	at org.apache.tomcat.util.net.NioEndpoint.initServerSocket(NioEndpoint.java:240) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint.bind(NioEndpoint.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.bindWithCleanup(AbstractEndpoint.java:1304) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.AbstractEndpoint.start(AbstractEndpoint.java:1390) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol.start(AbstractProtocol.java:644) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.Connector.startInternal(Connector.java:1079) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardService.addConnector(StandardService.java:219) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.addPreviouslyRemovedConnectors(TomcatWebServer.java:310) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.start(TomcatWebServer.java:236) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle.start(WebServerStartStopLifecycle.java:44) ~[spring-boot-3.5.0.jar:3.5.0]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:405) ~[spring-context-6.2.7.jar:6.2.7]
	... 14 more
2025-06-17 12:50:47.402 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 12:50:47.710 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 43228 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 12:50:47.711 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 12:50:47.712 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 12:50:49.505 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.051 seconds (process running for 2.84)
2025-06-17 12:50:49.507 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 12:51:02.155 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:02.203 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:02.350 [http-nio-8080-exec-1] INFO  com.example.demo.service.OrderService - 开始购物车结算: username=user
2025-06-17 12:51:02.351 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:02.503 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:02.503 [http-nio-8080-exec-1] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:51:02.503 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:02.504 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:02.514 [http-nio-8080-exec-1] ERROR com.example.demo.controller.OrderController - 购物车结算失败: 余额不足，当前余额：100.00，需要支付：399.00
java.lang.RuntimeException: 余额不足，当前余额：100.00，需要支付：399.00
	at com.example.demo.service.OrderService.checkoutFromCart(OrderService.java:64) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.OrderService$$SpringCGLIB$$0.checkoutFromCart(<generated>) ~[classes/:?]
	at com.example.demo.controller.OrderController.checkout(OrderController.java:34) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
2025-06-17 12:51:17.234 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.237 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.239 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 开始购物车结算: username=user
2025-06-17 12:51:17.240 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.243 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.243 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:51:17.244 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.244 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.276 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 订单创建成功: orderNumber=ORD20250617125117759, totalAmount=399.00
2025-06-17 12:51:17.292 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 扣除用户余额: username=user, 扣除金额=399.00, 剩余余额=101.00
2025-06-17 12:51:17.299 [http-nio-8080-exec-2] DEBUG com.example.demo.service.OrderService - 减少商品库存: productId=4, 减少数量=1, 剩余库存=79
2025-06-17 12:51:17.300 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 清空购物车: username=user
2025-06-17 12:51:17.300 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.303 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.307 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 清空购物车成功: userId=2
2025-06-17 12:51:17.308 [http-nio-8080-exec-2] INFO  com.example.demo.service.OrderService - 清空购物车: username=user
2025-06-17 12:51:17.311 [http-nio-8080-exec-2] INFO  com.example.demo.controller.OrderController - 购物车结算成功: username=user, orderNumber=ORD20250617125117759
2025-06-17 12:51:17.330 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 12:51:17.331 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.333 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 12:51:17.334 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.335 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.336 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 12:51:17.336 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.340 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.340 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 12:51:17.355 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.357 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.358 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 12:51:17.358 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.361 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.364 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 12:51:17.380 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 12:51:17.382 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 12:51:17.382 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 12:51:17.387 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 12:51:17.390 [http-nio-8080-exec-9] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 15:57:04.618 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:57:04.619 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:04.622 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:57:04.622 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:04.623 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:04.624 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:57:04.624 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:04.633 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:04.633 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 15:57:04.744 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:57:04.745 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:04.746 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:57:04.746 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:04.749 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:04.749 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:57:04.749 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:04.752 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:04.752 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 15:57:04.799 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:04.799 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:04.801 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:04.801 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:04.801 [http-nio-8080-exec-5] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 15:57:04.801 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:04.801 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:04.804 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:04.809 [http-nio-8080-exec-5] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 15:57:04.809 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:04.813 [http-nio-8080-exec-10] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 15:57:09.713 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:57:09.713 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:09.715 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:57:09.715 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:09.717 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:09.717 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:57:09.717 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:09.721 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:09.721 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 15:57:12.963 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:57:12.963 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:12.965 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:57:12.965 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:12.968 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:12.968 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:57:12.968 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:12.971 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:12.971 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 15:57:15.462 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:57:15.462 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:15.464 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:57:15.465 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:15.466 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:15.467 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:57:15.467 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:15.471 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:15.471 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 15:57:20.174 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:57:20.174 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:20.177 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:57:20.177 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:20.179 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:20.179 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:57:20.179 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:20.183 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:20.183 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 15:57:23.233 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:57:23.233 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:23.235 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:57:23.235 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:57:23.238 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:57:23.238 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:57:23.238 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:57:23.241 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:57:23.241 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 15:58:00.421 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 15:58:00.421 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:58:00.423 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 15:58:00.423 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 15:58:00.426 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 15:58:00.426 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 15:58:00.426 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 15:58:00.431 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 15:58:00.431 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:06:24.556 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 16:06:25.017 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 21100 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 16:06:25.020 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 16:06:25.020 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 16:06:27.011 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.323 seconds (process running for 3.421)
2025-06-17 16:06:27.013 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 16:06:33.358 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:33.403 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:06:33.564 [http-nio-8080-exec-1] DEBUG com.example.demo.service.ForumPostService - 添加帖子收藏: username=user, postId=4
2025-06-17 16:06:33.565 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:06:33.672 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:06:33.697 [http-nio-8080-exec-1] DEBUG com.example.demo.service.ForumPostService - 帖子收藏添加成功: favoriteId=1
2025-06-17 16:06:33.701 [http-nio-8080-exec-1] INFO  com.example.demo.controller.ForumController - 添加帖子收藏成功: username=user, postId=4
2025-06-17 16:06:35.805 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:35.806 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:06:35.807 [http-nio-8080-exec-3] DEBUG com.example.demo.service.ForumPostService - 移除帖子收藏: username=user, postId=4
2025-06-17 16:06:35.808 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:06:35.812 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:06:35.817 [http-nio-8080-exec-3] DEBUG com.example.demo.service.ForumPostService - 帖子收藏移除成功: userId=2, postId=4
2025-06-17 16:06:35.819 [http-nio-8080-exec-3] INFO  com.example.demo.controller.ForumController - 移除帖子收藏成功: username=user, postId=4
2025-06-17 16:06:36.632 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:36.634 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:06:36.635 [http-nio-8080-exec-7] DEBUG com.example.demo.service.ForumPostService - 添加帖子收藏: username=user, postId=5
2025-06-17 16:06:36.635 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:06:36.637 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:06:36.645 [http-nio-8080-exec-7] DEBUG com.example.demo.service.ForumPostService - 帖子收藏添加成功: favoriteId=2
2025-06-17 16:06:36.647 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ForumController - 添加帖子收藏成功: username=user, postId=5
2025-06-17 16:06:40.540 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:06:40.540 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:40.542 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:06:40.543 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:40.546 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:06:40.546 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:06:40.546 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:06:40.552 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:06:40.552 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:06:40.645 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:06:40.645 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:40.647 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:06:40.648 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:40.650 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:06:40.650 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:06:40.651 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:06:40.655 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:06:40.655 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:06:40.675 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:40.675 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:06:40.678 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:06:40.678 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:06:40.678 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:06:40.679 [http-nio-8080-exec-6] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:06:40.679 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:06:40.683 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:06:40.685 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:06:40.688 [http-nio-8080-exec-2] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:06:40.691 [http-nio-8080-exec-6] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:08:26.250 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:08:26.250 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:08:26.252 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:08:26.252 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:08:26.253 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:08:26.253 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:08:26.253 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:08:26.257 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:08:26.258 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:08:26.291 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:08:26.291 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:08:26.296 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:08:26.296 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:08:26.296 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:08:26.296 [http-nio-8080-exec-9] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:08:26.297 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:08:26.301 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:08:26.306 [http-nio-8080-exec-8] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:08:26.307 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:08:26.311 [http-nio-8080-exec-9] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:10:56.047 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:10:56.047 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:10:56.049 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:10:56.050 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:10:56.051 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:10:56.052 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:10:56.052 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:10:56.055 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:10:56.056 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:10:56.085 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:10:56.085 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:10:56.087 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:10:56.087 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:10:56.087 [http-nio-8080-exec-3] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:10:56.087 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:10:56.088 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:10:56.091 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:10:56.091 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:10:56.093 [http-nio-8080-exec-3] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:10:56.094 [http-nio-8080-exec-7] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:11:12.418 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:11:12.418 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:12.422 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:11:12.422 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:12.426 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:12.426 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:11:12.426 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:12.431 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:12.431 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:11:12.484 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:12.484 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:12.487 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:12.487 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:12.487 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:12.487 [http-nio-8080-exec-5] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:11:12.488 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:12.491 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:12.493 [http-nio-8080-exec-5] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:11:12.495 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:12.499 [http-nio-8080-exec-6] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:11:44.268 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:11:44.268 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.272 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:11:44.273 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.275 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:44.275 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:11:44.275 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:44.280 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:44.280 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:11:44.431 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.435 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:44.435 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:44.438 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:44.439 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.439 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.439 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.439 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.439 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:11:44.441 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:11:44.441 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:44.443 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:44.443 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:44.443 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:44.443 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:44.443 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:44.443 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:44.443 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:44.443 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:11:44.443 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:11:44.445 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:44.446 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:44.447 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:44.447 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:44.448 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:11:44.448 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:11:44.449 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:11:44.449 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:11:44.450 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:11:44.450 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:13:27.549 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:13:27.549 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:13:27.554 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:13:27.554 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:13:27.554 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:13:27.554 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:13:27.554 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:13:27.559 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:13:27.559 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:13:27.560 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:13:27.560 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:13:27.560 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:13:27.560 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:13:27.561 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:13:27.561 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:13:27.563 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:13:27.563 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:13:27.563 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:13:27.563 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:13:27.563 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:13:27.564 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:13:27.566 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:13:27.566 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:13:27.566 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:13:27.566 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:13:27.567 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:13:27.569 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:13:27.569 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:13:27.570 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:13:27.575 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:15:46.281 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:15:46.281 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:15:46.284 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:15:46.284 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:15:46.284 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:15:46.284 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:15:46.284 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:15:46.286 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:15:46.288 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:15:46.288 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:15:46.288 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:15:46.288 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:15:46.288 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:15:46.288 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:15:46.289 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:15:46.289 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:15:46.291 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:15:46.291 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:15:46.291 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:15:46.291 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:15:46.291 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:15:46.291 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:15:46.291 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:15:46.293 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:15:46.295 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:15:46.296 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:15:46.296 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:15:46.296 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:15:46.298 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:15:46.298 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:19:31.423 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 16:19:31.976 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 48960 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 16:19:31.979 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 16:19:31.980 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 16:19:35.132 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 3.627 seconds (process running for 4.66)
2025-06-17 16:19:35.135 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 16:21:05.075 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:21:05.076 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.152 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:21:05.153 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.154 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:05.154 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:21:05.155 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:05.403 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:05.403 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:21:05.735 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.736 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.737 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.737 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:05.737 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:05.737 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:05.737 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.737 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:05.737 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.737 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:05.738 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:05.738 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:05.738 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:05.738 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:05.739 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:05.739 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:05.740 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:05.741 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:05.741 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:05.743 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:05.743 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:05.745 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:05.743 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:05.745 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:05.747 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:21:05.747 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:21:05.747 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:21:05.749 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:21:05.749 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:21:05.750 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:21:57.601 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:21:57.601 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.604 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:21:57.605 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.607 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:57.607 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:21:57.608 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:57.616 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:57.616 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:21:57.733 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:21:57.734 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.735 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:21:57.737 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.741 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:57.741 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:21:57.741 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:57.748 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:57.748 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:21:57.793 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.793 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.793 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.793 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.793 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:21:57.800 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:57.800 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:57.800 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:57.800 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:21:57.800 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:57.800 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:21:57.801 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:57.800 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:57.801 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:57.800 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:21:57.800 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:21:57.801 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:57.801 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:21:57.805 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:57.805 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:57.805 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:57.805 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:57.805 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:21:57.811 [http-nio-8080-exec-4] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:21:57.811 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=0
2025-06-17 16:21:57.813 [http-nio-8080-exec-5] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:21:57.813 [http-nio-8080-exec-1] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:21:57.813 [http-nio-8080-exec-2] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:22:05.351 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:22:05.351 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:22:05.352 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:22:05.352 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:22:05.354 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:22:05.354 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:22:05.354 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:22:05.358 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:22:05.358 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:22:07.289 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:22:07.289 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:22:07.290 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:22:07.291 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:22:07.292 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:22:07.292 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:22:07.292 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:22:07.296 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:22:07.296 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:26:18.172 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 16:26:18.563 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 9052 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 16:26:18.565 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 16:26:18.566 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 16:26:20.525 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.28 seconds (process running for 3.226)
2025-06-17 16:26:20.527 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 16:26:25.607 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:25.664 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:25.782 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:25.880 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:25.907 [http-nio-8080-exec-1] INFO  com.example.demo.controller.LearningController - 预约活动成功: username=user, activityId=4
2025-06-17 16:26:28.481 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:26:28.481 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:28.484 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:26:28.485 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:28.487 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:28.487 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:26:28.487 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:28.492 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:28.492 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:26:29.508 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:26:29.508 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.511 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:26:29.511 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.514 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:29.514 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:26:29.515 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:29.518 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:29.519 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:26:29.592 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:26:29.592 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.594 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:26:29.595 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.597 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:29.597 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:26:29.597 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:29.601 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:29.601 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:26:29.621 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.623 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.625 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:29.626 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:29.626 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.626 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:29.626 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.626 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:29.627 [http-nio-8080-exec-7] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:26:29.627 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:29.630 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:29.630 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:29.630 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:29.630 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:29.630 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:29.630 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:26:29.631 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:29.631 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:29.633 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:29.637 [http-nio-8080-exec-7] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:26:29.638 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:29.641 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:29.642 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:29.645 [http-nio-8080-exec-6] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:26:29.645 [http-nio-8080-exec-9] INFO  com.example.demo.controller.LearningController - 获取用户预约列表成功: username=user, 预约数量=1
2025-06-17 16:26:29.645 [http-nio-8080-exec-8] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:26:29.655 [http-nio-8080-exec-10] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:26:46.713 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:26:46.713 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:46.715 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:26:46.715 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:46.717 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:46.717 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:26:46.717 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:46.721 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:46.721 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:26:46.758 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:46.761 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:46.761 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:26:46.761 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:46.764 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:46.767 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:26:47.056 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:26:47.056 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.059 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:26:47.059 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.061 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.061 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:26:47.061 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.065 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.065 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:26:47.141 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.141 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.141 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.141 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.141 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.142 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.144 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.144 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.144 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.144 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.144 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.144 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.144 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.145 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.145 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.145 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.145 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.145 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.148 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.148 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.148 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.151 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:26:47.151 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:26:47.151 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:26:47.151 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.151 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.151 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.153 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:26:47.153 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:26:47.153 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:26:47.702 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:26:47.703 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.705 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:26:47.706 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:26:47.707 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:26:47.708 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:26:47.708 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:26:47.711 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:26:47.711 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:28:56.044 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 16:28:56.601 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 36988 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 16:28:56.604 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 16:28:56.605 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 16:28:59.689 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 3.535 seconds (process running for 4.909)
2025-06-17 16:28:59.693 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 16:29:02.691 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:29:02.692 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:02.779 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:29:02.780 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:02.781 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:02.782 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:29:02.782 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.148 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.148 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:29:03.393 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.398 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:03.398 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.403 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.405 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.405 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.405 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.405 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.405 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.406 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:29:03.409 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:03.409 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:03.410 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:03.410 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.410 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.410 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.410 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:03.410 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.410 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:03.411 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.418 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.418 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.418 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.418 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.418 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.422 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:29:03.422 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:29:03.422 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:29:03.423 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:29:03.423 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:29:03.958 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:29:03.958 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.960 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:29:03.961 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:03.962 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:03.963 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:29:03.963 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:03.969 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:03.969 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:29:05.586 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:29:05.586 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:05.588 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:29:05.588 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:05.590 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:05.590 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:29:05.590 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:05.594 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:05.594 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:29:06.487 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:06.489 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:06.496 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:06.501 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:06.719 [http-nio-8080-exec-4] INFO  com.example.demo.controller.LearningController - 预约活动成功: username=user, activityId=5
2025-06-17 16:29:08.524 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:29:08.524 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:08.526 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:29:08.527 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:08.535 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:08.537 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:29:08.537 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:08.542 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:08.543 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:29:09.217 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:29:09.217 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:09.221 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:29:09.221 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:09.223 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:09.223 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:29:09.223 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:09.227 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:09.227 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:29:09.291 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:29:09.291 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:09.293 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:29:09.293 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:09.296 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:09.296 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:29:09.297 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:09.300 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:09.300 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:29:09.317 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:09.317 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:09.317 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:29:09.320 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:09.320 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:09.320 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:29:09.320 [http-nio-8080-exec-1] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:29:09.320 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:09.320 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:09.321 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:29:09.323 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:09.323 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:09.327 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:29:09.327 [http-nio-8080-exec-1] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:29:09.328 [http-nio-8080-exec-3] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:29:09.336 [http-nio-8080-exec-8] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:30:24.410 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:30:24.410 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:30:24.413 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:30:24.413 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:30:24.415 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:30:24.415 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:30:24.415 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:30:24.421 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:30:24.422 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:30:24.455 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:30:24.455 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:30:24.455 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:30:24.457 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:30:24.457 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:30:24.457 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:30:24.457 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:30:24.457 [http-nio-8080-exec-7] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:30:24.458 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:30:24.458 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:30:24.459 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:30:24.459 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:30:24.459 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:30:24.461 [http-nio-8080-exec-4] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:30:24.462 [http-nio-8080-exec-10] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:30:24.462 [http-nio-8080-exec-7] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:31:33.323 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:31:33.323 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:31:33.326 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:31:33.326 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:31:33.328 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:31:33.328 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:31:33.328 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:31:33.331 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:31:33.331 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:31:33.363 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:31:33.363 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:31:33.363 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:31:33.366 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:31:33.366 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:31:33.366 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:31:33.366 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:31:33.367 [http-nio-8080-exec-9] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:31:33.367 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:31:33.367 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:31:33.371 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:31:33.371 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:31:33.371 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:31:33.374 [http-nio-8080-exec-5] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:31:33.376 [http-nio-8080-exec-9] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:31:33.376 [http-nio-8080-exec-1] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:32:08.948 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:32:08.948 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:32:08.949 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:32:08.950 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:32:08.950 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:32:08.951 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:32:08.951 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:32:08.953 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:32:08.953 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:32:08.984 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:32:08.989 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:32:08.989 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:32:08.990 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:32:08.991 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:32:08.993 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:32:08.993 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:32:08.993 [http-nio-8080-exec-2] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:32:08.993 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:32:08.994 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:32:08.994 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:32:08.997 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:32:08.998 [http-nio-8080-exec-3] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:32:08.998 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:32:08.999 [http-nio-8080-exec-2] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:32:09.002 [http-nio-8080-exec-10] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:33:50.990 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:33:50.991 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:33:50.995 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:33:50.995 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:33:50.998 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:33:50.998 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:33:50.998 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:33:51.003 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:33:51.003 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:33:51.033 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:33:51.036 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:33:51.037 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:33:51.041 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:33:51.042 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:33:51.043 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:33:51.044 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:33:51.044 [http-nio-8080-exec-6] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:33:51.045 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:33:51.046 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:33:51.046 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:33:51.046 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:33:51.047 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:33:51.048 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:33:51.048 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:33:51.048 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:33:51.049 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:33:51.049 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:33:51.050 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:33:51.052 [http-nio-8080-exec-5] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:33:51.052 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:33:51.052 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:33:51.052 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:33:51.052 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:33:51.053 [http-nio-8080-exec-6] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:33:51.057 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:33:51.061 [http-nio-8080-exec-1] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:33:51.063 [http-nio-8080-exec-9] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=2
2025-06-17 16:34:28.643 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:34:28.643 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:28.646 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:34:28.647 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:28.649 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:34:28.649 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:34:28.649 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:34:28.652 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:34:28.652 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:34:28.689 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:28.690 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:28.692 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:34:28.692 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:34:28.692 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:28.693 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:34:28.694 [http-nio-8080-exec-10] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:34:28.694 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:34:28.699 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:34:28.699 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:34:28.699 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:34:28.700 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:34:28.700 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:28.700 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:28.703 [http-nio-8080-exec-10] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:34:28.703 [http-nio-8080-exec-2] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:34:28.705 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:34:28.705 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:34:28.705 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:34:28.705 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:34:28.705 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:34:28.705 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:34:28.705 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:34:28.708 [http-nio-8080-exec-4] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:34:28.708 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:34:28.708 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:34:28.712 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:34:28.713 [http-nio-8080-exec-6] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=2
2025-06-17 16:34:43.307 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 16:34:43.718 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 48076 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 16:34:43.720 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 16:34:43.721 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 16:34:45.888 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.513 seconds (process running for 3.46)
2025-06-17 16:34:45.893 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 16:34:59.722 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:34:59.773 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:34:59.954 [http-nio-8080-exec-1] INFO  com.example.demo.service.UserService - 开始充值操作: username=user, amount=500, paymentMethod=alipay
2025-06-17 16:34:59.954 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:00.166 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:00.361 [http-nio-8080-exec-1] ERROR com.example.demo.controller.ProfileController - 充值失败: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO recharge_records  ( user_id, amount, payment_method, status, transaction_id, remark, create_time, update_time )  VALUES (  ?, ?, ?, ?, ?, ?, ?, ?  )
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO recharge_records  ( user_id, amount, payment_method, status, transaction_id, remark, create_time, update_time )  VALUES (  ?, ?, ?, ?, ?, ?, ?, ?  )
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.insert(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:272) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:59) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.insert(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.recharge(UserService.java:194) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.recharge(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.recharge(ProfileController.java:215) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:48) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:75) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.update(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.update(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 123 more
2025-06-17 16:35:00.438 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:35:00.438 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:00.440 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:35:00.442 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:00.444 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:00.444 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:35:00.444 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:00.449 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:00.450 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:35:04.279 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:35:04.279 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.282 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:35:04.282 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.284 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.284 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:35:04.284 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.289 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.290 [http-nio-8080-exec-4] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:35:04.402 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:35:04.403 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.405 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:35:04.405 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.407 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.408 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:35:04.408 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.412 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.412 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:35:04.451 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.452 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.452 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.452 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.452 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.453 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:35:04.454 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.455 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.455 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.455 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:35:04.455 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.455 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.455 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 获取用户充值记录: username=user
2025-06-17 16:35:04.455 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.457 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.457 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:35:04.457 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:35:04.457 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.457 [http-nio-8080-exec-6] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:35:04.457 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.457 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.458 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:35:04.463 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.463 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.466 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.475 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.475 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.471 [http-nio-8080-exec-9] ERROR com.example.demo.controller.ProfileController - 获取充值记录失败: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectList(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:164) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.selectUserRechargeHistory(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.getRechargeHistory(UserService.java:211) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:724) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.getRechargeHistory(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.getRechargeHistory(ProfileController.java:231) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 119 more
2025-06-17 16:35:04.477 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:35:04.478 [http-nio-8080-exec-10] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=2
2025-06-17 16:35:04.480 [http-nio-8080-exec-5] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:35:04.480 [http-nio-8080-exec-6] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:35:04.481 [http-nio-8080-exec-7] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:35:04.483 [http-nio-8080-exec-8] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:36:07.964 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:36:07.964 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:07.966 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:36:07.966 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:07.967 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:07.967 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:36:07.967 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:07.971 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:07.972 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:36:08.131 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.131 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.135 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.135 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:08.135 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:08.135 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:08.135 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:08.137 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:08.137 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:08.138 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:08.138 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.138 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:08.141 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.142 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:08.142 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.142 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:08.142 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:08.142 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:36:08.143 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:08.143 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:08.143 [http-nio-8080-exec-4] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:36:08.144 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:08.144 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:08.145 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:36:08.146 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:08.147 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:08.147 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:08.148 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:36:08.149 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:36:08.149 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:36:08.444 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:36:08.444 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.445 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:36:08.447 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:08.448 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:08.449 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:36:08.449 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:08.451 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:08.451 [http-nio-8080-exec-5] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:36:10.524 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:36:10.524 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:10.526 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:36:10.526 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:10.528 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:10.528 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:36:10.528 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:10.530 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:10.530 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:36:11.358 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:11.361 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:11.362 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:11.365 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:11.385 [http-nio-8080-exec-9] INFO  com.example.demo.controller.LearningController - 预约活动成功: username=user, activityId=3
2025-06-17 16:36:12.298 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:36:12.298 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:12.299 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:36:12.300 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:12.301 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:12.301 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:36:12.301 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:12.303 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:12.303 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:36:20.790 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:36:20.790 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:20.792 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:36:20.792 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:20.793 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:20.793 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:36:20.793 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:20.796 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:20.796 [http-nio-8080-exec-8] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:36:20.844 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:20.846 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:20.846 [http-nio-8080-exec-7] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:36:20.846 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:20.849 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:20.850 [http-nio-8080-exec-7] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:36:22.831 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:36:22.832 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.833 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:36:22.833 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.834 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.834 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:36:22.834 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.837 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.837 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:36:22.897 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:36:22.897 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.900 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:36:22.900 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.901 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.901 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:36:22.901 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.904 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.904 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user
2025-06-17 16:36:22.929 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.929 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.929 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.931 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.931 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.931 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:36:22.932 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.932 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.932 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.932 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:36:22.932 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.932 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.932 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.933 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.933 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.933 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:36:22.933 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:36:22.933 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 获取用户充值记录: username=user
2025-06-17 16:36:22.933 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:36:22.933 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.933 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.933 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:36:22.935 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.935 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.935 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.935 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.935 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.935 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:36:22.937 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:36:22.938 [http-nio-8080-exec-2] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:36:22.938 [http-nio-8080-exec-9] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:36:22.938 [http-nio-8080-exec-10] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:36:22.939 [http-nio-8080-exec-6] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=3
2025-06-17 16:36:22.944 [http-nio-8080-exec-8] ERROR com.example.demo.controller.ProfileController - 获取充值记录失败: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectList(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:164) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.selectUserRechargeHistory(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.getRechargeHistory(UserService.java:211) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:724) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.getRechargeHistory(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.getRechargeHistory(ProfileController.java:231) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at jdk.internal.reflect.GeneratedMethodAccessor27.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 119 more
2025-06-17 16:38:28.527 [main] INFO  com.example.demo.Demo1Application - 启动应用程序 Demo1Application
2025-06-17 16:38:28.909 [main] INFO  com.example.demo.Demo1Application - Starting Demo1Application using Java 17.0.15 with PID 39840 (E:\bigHomework\demo1\target\classes started by yxn in E:\bigHomework\demo1)
2025-06-17 16:38:28.911 [main] DEBUG com.example.demo.Demo1Application - Running with Spring Boot v3.5.0, Spring v6.2.7
2025-06-17 16:38:28.911 [main] INFO  com.example.demo.Demo1Application - No active profile set, falling back to 1 default profile: "default"
2025-06-17 16:38:30.964 [main] INFO  com.example.demo.Demo1Application - Started Demo1Application in 2.371 seconds (process running for 3.269)
2025-06-17 16:38:30.967 [main] INFO  com.example.demo.Demo1Application - 应用程序启动成功
2025-06-17 16:38:35.533 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:38:35.533 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:35.576 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:38:35.576 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:35.578 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:35.578 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:38:35.578 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:35.833 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:35.833 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=101.00
2025-06-17 16:38:35.981 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:38:35.981 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:35.984 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:38:35.985 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:35.988 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:35.988 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:38:35.988 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:35.992 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:35.992 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=101.00
2025-06-17 16:38:36.027 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:36.031 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:36.031 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:36.032 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:36.037 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:36.038 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:38:36.038 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:36.042 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:36.047 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:36.047 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:36.047 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:36.048 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:36.049 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:36.052 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:36.052 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:36.053 [http-nio-8080-exec-3] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:38:36.053 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:36.053 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:38:36.053 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:36.053 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:38:36.053 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:36.053 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 获取用户充值记录: username=user
2025-06-17 16:38:36.053 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:36.053 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:38:36.053 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:36.053 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:36.062 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:36.064 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:36.065 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:36.076 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:36.077 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=3
2025-06-17 16:38:36.078 [http-nio-8080-exec-6] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:38:36.080 [http-nio-8080-exec-5] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:38:36.220 [http-nio-8080-exec-8] ERROR com.example.demo.controller.ProfileController - 获取充值记录失败: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectList(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:164) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.selectUserRechargeHistory(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.getRechargeHistory(UserService.java:211) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:724) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.getRechargeHistory(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.getRechargeHistory(ProfileController.java:231) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 119 more
2025-06-17 16:38:40.981 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:40.984 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:40.992 [http-nio-8080-exec-9] INFO  com.example.demo.service.UserService - 开始充值操作: username=user, amount=200, paymentMethod=alipay
2025-06-17 16:38:40.992 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:40.998 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:41.025 [http-nio-8080-exec-9] ERROR com.example.demo.controller.ProfileController - 充值失败: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO recharge_records  ( user_id, amount, payment_method, status, transaction_id, remark, create_time, update_time )  VALUES (  ?, ?, ?, ?, ?, ?, ?, ?  )
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO recharge_records  ( user_id, amount, payment_method, status, transaction_id, remark, create_time, update_time )  VALUES (  ?, ?, ?, ?, ?, ?, ?, ?  )
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.insert(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:272) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:59) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.insert(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.recharge(UserService.java:194) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.recharge(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.recharge(ProfileController.java:215) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:48) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:75) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.update(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.update(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 123 more
2025-06-17 16:38:41.047 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:38:41.050 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:41.053 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:38:41.054 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:41.056 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:41.057 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:38:41.057 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:41.063 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:41.064 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=101.00
2025-06-17 16:38:43.310 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:38:43.310 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.313 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:38:43.313 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.315 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.315 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:38:43.315 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.321 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.321 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=101.00
2025-06-17 16:38:43.424 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:38:43.425 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.428 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:38:43.429 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.430 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.431 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:38:43.431 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.435 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.435 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=101.00
2025-06-17 16:38:43.475 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.475 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.475 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.477 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.477 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.477 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:43.479 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.479 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.479 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-3] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.479 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.479 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 获取用户充值记录: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.479 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:43.479 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.479 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:43.482 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.482 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.482 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.485 [http-nio-8080-exec-3] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:38:43.485 [http-nio-8080-exec-6] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:38:43.485 [http-nio-8080-exec-4] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:38:43.487 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.487 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.487 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:43.491 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:38:43.492 [http-nio-8080-exec-5] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=3
2025-06-17 16:38:43.492 [http-nio-8080-exec-8] ERROR com.example.demo.controller.ProfileController - 获取充值记录失败: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectList(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:164) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.selectUserRechargeHistory(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.getRechargeHistory(UserService.java:211) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:724) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.getRechargeHistory(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.getRechargeHistory(ProfileController.java:231) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.internal.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 119 more
2025-06-17 16:38:58.222 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:58.226 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:58.228 [http-nio-8080-exec-9] INFO  com.example.demo.service.UserService - 开始充值操作: username=user, amount=200, paymentMethod=alipay
2025-06-17 16:38:58.228 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:58.231 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:58.244 [http-nio-8080-exec-9] ERROR com.example.demo.controller.ProfileController - 充值失败: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO recharge_records  ( user_id, amount, payment_method, status, transaction_id, remark, create_time, update_time )  VALUES (  ?, ?, ?, ?, ?, ?, ?, ?  )
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error updating database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.insert-Inline
### The error occurred while setting parameters
### SQL: INSERT INTO recharge_records  ( user_id, amount, payment_method, status, transaction_id, remark, create_time, update_time )  VALUES (  ?, ?, ?, ?, ?, ?, ?, ?  )
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.insert(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.insert(SqlSessionTemplate.java:272) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:59) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.insert(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.recharge(UserService.java:194) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:196) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:380) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:119) ~[spring-tx-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:184) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:728) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.recharge(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.recharge(ProfileController.java:215) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:914) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:590) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.update(PreparedStatementHandler.java:48) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.update(RoutingStatementHandler.java:75) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.update(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doUpdate(SimpleExecutor.java:50) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.update(BaseExecutor.java:117) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.update(CachingExecutor.java:76) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Invocation.proceed(Invocation.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:106) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.update(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.update(DefaultSqlSession.java:197) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.insert(DefaultSqlSession.java:184) ~[mybatis-3.5.16.jar:3.5.16]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 123 more
2025-06-17 16:38:58.270 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:38:58.272 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:58.274 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:38:58.274 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:38:58.276 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:38:58.276 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:38:58.276 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:38:58.279 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:38:58.279 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=101.00
2025-06-17 16:39:15.822 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:39:15.822 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:15.824 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:39:15.825 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:15.827 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:15.827 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:39:15.827 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:15.830 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:15.830 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=500.00
2025-06-17 16:39:15.986 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:39:15.986 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:15.988 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:39:15.989 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:15.991 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:15.991 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:39:15.991 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:15.994 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:15.994 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=500.00
2025-06-17 16:39:16.034 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:16.036 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:16.038 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:16.038 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:16.039 [http-nio-8080-exec-4] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:16.039 [http-nio-8080-exec-4] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:39:16.039 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:16.039 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:16.042 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:16.042 [http-nio-8080-exec-4] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:16.046 [http-nio-8080-exec-4] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:39:16.046 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:16.048 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:16.046 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:39:16.049 [http-nio-8080-exec-3] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:39:16.049 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:16.050 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:16.052 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:16.052 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:16.052 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:39:16.052 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:39:16.052 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:39:16.052 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:16.052 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 获取用户充值记录: username=user
2025-06-17 16:39:16.052 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:16.052 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:39:16.057 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:16.057 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:16.057 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:16.057 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:39:16.061 [http-nio-8080-exec-6] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:39:16.061 [http-nio-8080-exec-5] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:39:16.065 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=3
2025-06-17 16:39:16.060 [http-nio-8080-exec-8] ERROR com.example.demo.controller.ProfileController - 获取充值记录失败: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
org.springframework.jdbc.BadSqlGrammarException: 
### Error querying database.  Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
### The error may exist in com/example/demo/mapper/RechargeRecordMapper.java (best guess)
### The error may involve com.example.demo.mapper.RechargeRecordMapper.selectUserRechargeHistory-Inline
### The error occurred while setting parameters
### SQL: SELECT rr.*, u.username, u.nickname FROM recharge_records rr LEFT JOIN users u ON rr.user_id = u.id WHERE rr.user_id = ? ORDER BY rr.create_time DESC
### Cause: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
; bad SQL grammar []
	at org.springframework.jdbc.support.SQLErrorCodeSQLExceptionTranslator.doTranslate(SQLErrorCodeSQLExceptionTranslator.java:246) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.springframework.jdbc.support.AbstractFallbackSQLExceptionTranslator.translate(AbstractFallbackSQLExceptionTranslator.java:107) ~[spring-jdbc-6.2.7.jar:6.2.7]
	at org.mybatis.spring.MyBatisExceptionTranslator.translateExceptionIfPossible(MyBatisExceptionTranslator.java:92) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:439) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at jdk.proxy2/jdk.proxy2.$Proxy88.selectList(Unknown Source) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate.selectList(SqlSessionTemplate.java:224) ~[mybatis-spring-3.0.3.jar:3.0.3]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.executeForMany(MybatisMapperMethod.java:164) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperMethod.execute(MybatisMapperMethod.java:77) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy$PlainMethodInvoker.invoke(MybatisMapperProxy.java:152) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at com.baomidou.mybatisplus.core.override.MybatisMapperProxy.invoke(MybatisMapperProxy.java:89) ~[mybatis-plus-core-3.5.7.jar:3.5.7]
	at jdk.proxy2/jdk.proxy2.$Proxy93.selectUserRechargeHistory(Unknown Source) ~[?:?]
	at com.example.demo.service.UserService.getRechargeHistory(UserService.java:211) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:359) ~[spring-aop-6.2.7.jar:6.2.7]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:724) ~[spring-aop-6.2.7.jar:6.2.7]
	at com.example.demo.service.UserService$$SpringCGLIB$$0.getRechargeHistory(<generated>) ~[classes/:?]
	at com.example.demo.controller.ProfileController.getRechargeHistory(ProfileController.java:231) ~[classes/:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:?]
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:258) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:191) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:986) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:891) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.41.jar:6.0]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:195) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) ~[tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:108) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy.lambda$doFilterInternal$3(FilterChainProxy.java:231) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:365) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.intercept.AuthorizationFilter.doFilter(AuthorizationFilter.java:101) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:125) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:131) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:85) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:100) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:179) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:107) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:93) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CorsFilter.doFilterInternal(CorsFilter.java:91) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doHeadersAfter(HeaderWriterFilter.java:90) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:75) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:82) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.SecurityContextHolderFilter.doFilter(SecurityContextHolderFilter.java:69) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:62) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.session.DisableEncodeUrlFilter.doFilterInternal(DisableEncodeUrlFilter.java:42) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:374) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:233) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:191) ~[spring-security-web-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.ServletRequestPathFilter.doFilter(ServletRequestPathFilter.java:52) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebSecurityConfiguration.java:319) ~[spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) ~[spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.servlet.handler.HandlerMappingIntrospector.lambda$createCacheFilter$3(HandlerMappingIntrospector.java:243) ~[spring-webmvc-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter$VirtualFilterChain.doFilter(CompositeFilter.java:113) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.CompositeFilter.doFilter(CompositeFilter.java:74) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.security.config.annotation.web.configuration.WebMvcSecurityConfiguration$CompositeFilterChainProxy.doFilter(WebMvcSecurityConfiguration.java:240) [spring-security-config-6.5.0.jar:6.5.0]
	at org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:362) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:278) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) [spring-web-6.2.7.jar:6.2.7]
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) [spring-web-6.2.7.jar:6.2.7]
	at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:164) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:140) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:483) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:116) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:344) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:398) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:903) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1740) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1189) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:658) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:63) [tomcat-embed-core-10.1.41.jar:10.1.41]
	at java.base/java.lang.Thread.run(Thread.java:840) [?:?]
Caused by: java.sql.SQLSyntaxErrorException: Table 'infomanagement.recharge_records' doesn't exist
	at com.mysql.cj.jdbc.exceptions.SQLError.createSQLException(SQLError.java:121) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.exceptions.SQLExceptionsMapping.translateException(SQLExceptionsMapping.java:122) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.executeInternal(ClientPreparedStatement.java:916) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.mysql.cj.jdbc.ClientPreparedStatement.execute(ClientPreparedStatement.java:354) ~[mysql-connector-j-8.0.33.jar:8.0.33]
	at com.zaxxer.hikari.pool.ProxyPreparedStatement.execute(ProxyPreparedStatement.java:44) ~[HikariCP-6.3.0.jar:?]
	at com.zaxxer.hikari.pool.HikariProxyPreparedStatement.execute(HikariProxyPreparedStatement.java) ~[HikariCP-6.3.0.jar:?]
	at jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.logging.jdbc.PreparedStatementLogger.invoke(PreparedStatementLogger.java:58) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy3/jdk.proxy3.$Proxy118.execute(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.statement.PreparedStatementHandler.query(PreparedStatementHandler.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.statement.RoutingStatementHandler.query(RoutingStatementHandler.java:80) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.internal.reflect.GeneratedMethodAccessor29.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:61) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy116.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.executor.SimpleExecutor.doQuery(SimpleExecutor.java:65) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.queryFromDatabase(BaseExecutor.java:336) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.BaseExecutor.query(BaseExecutor.java:158) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.executor.CachingExecutor.query(CachingExecutor.java:110) ~[mybatis-3.5.16.jar:3.5.16]
	at com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor.intercept(MybatisPlusInterceptor.java:81) ~[mybatis-plus-extension-3.5.7.jar:3.5.7]
	at org.apache.ibatis.plugin.Plugin.invoke(Plugin.java:59) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.proxy2/jdk.proxy2.$Proxy115.query(Unknown Source) ~[?:?]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:154) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:147) ~[mybatis-3.5.16.jar:3.5.16]
	at org.apache.ibatis.session.defaults.DefaultSqlSession.selectList(DefaultSqlSession.java:142) ~[mybatis-3.5.16.jar:3.5.16]
	at jdk.internal.reflect.GeneratedMethodAccessor28.invoke(Unknown Source) ~[?:?]
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]
	at java.base/java.lang.reflect.Method.invoke(Method.java:569) ~[?:?]
	at org.mybatis.spring.SqlSessionTemplate$SqlSessionInterceptor.invoke(SqlSessionTemplate.java:425) ~[mybatis-spring-3.0.3.jar:3.0.3]
	... 119 more
2025-06-17 16:40:03.384 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:03.386 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:03.387 [http-nio-8080-exec-9] INFO  com.example.demo.service.UserService - 开始充值操作: username=user, amount=100, paymentMethod=alipay
2025-06-17 16:40:03.387 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:03.391 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:03.405 [http-nio-8080-exec-9] INFO  com.example.demo.service.UserService - 充值成功: username=user, 原余额=500.00, 充值金额=100, 新余额=600.00
2025-06-17 16:40:03.409 [http-nio-8080-exec-9] INFO  com.example.demo.controller.ProfileController - 用户充值成功: username=user, amount=100, paymentMethod=alipay
2025-06-17 16:40:03.431 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:03.431 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:03.433 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:03.433 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:03.436 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:03.436 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:03.436 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:03.439 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:03.439 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:09.709 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:09.709 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:09.711 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:09.711 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:09.712 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:09.712 [http-nio-8080-exec-1] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:09.712 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:09.715 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:09.715 [http-nio-8080-exec-1] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:17.473 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:17.473 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.475 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:17.475 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.476 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:17.476 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:17.477 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:17.479 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:17.480 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:17.669 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.669 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.672 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:17.673 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:17.673 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:17.673 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:17.675 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:17.675 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:17.676 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.676 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.676 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.676 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:17.678 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 16:40:17.678 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 16:40:17.680 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:17.680 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:17.680 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:17.680 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:17.680 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:17.680 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:17.680 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:17.680 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:17.684 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:17.685 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:17.685 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:17.685 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:17.686 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 16:40:17.686 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 16:40:17.686 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 16:40:17.688 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 16:40:18.128 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:18.128 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:18.131 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:18.131 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:18.134 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:18.134 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:18.134 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:18.137 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:18.137 [http-nio-8080-exec-10] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:18.788 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:18.788 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:18.790 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:18.790 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:18.792 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:18.792 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:18.793 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:18.795 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:18.795 [http-nio-8080-exec-2] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:18.843 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:18.845 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:18.845 [http-nio-8080-exec-3] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:40:18.845 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:18.847 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:18.849 [http-nio-8080-exec-3] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:40:19.167 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:19.167 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.170 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:19.170 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.173 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.173 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:19.173 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.177 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.177 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:19.236 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:19.236 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.238 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:19.239 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.240 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.241 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:19.241 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.243 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.243 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:19.259 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.261 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.262 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.264 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.264 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.264 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.265 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.264 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.265 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.269 [http-nio-8080-exec-7] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:40:19.270 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.270 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.270 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.270 [http-nio-8080-exec-8] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.270 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 获取用户充值记录: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.270 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:40:19.270 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.272 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.272 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.272 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.272 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.272 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.274 [http-nio-8080-exec-8] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:40:19.274 [http-nio-8080-exec-2] INFO  com.example.demo.controller.ProfileController - 获取充值记录成功: username=user, 记录数量=1
2025-06-17 16:40:19.275 [http-nio-8080-exec-5] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:40:19.275 [http-nio-8080-exec-1] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=3
2025-06-17 16:40:19.275 [http-nio-8080-exec-10] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:40:19.831 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:19.831 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.833 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:19.833 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.836 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.836 [http-nio-8080-exec-3] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:19.836 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.839 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.839 [http-nio-8080-exec-3] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:19.877 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:19.880 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:19.880 [http-nio-8080-exec-6] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:40:19.881 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:19.884 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:19.886 [http-nio-8080-exec-6] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:40:20.454 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:20.454 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.456 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:20.456 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.458 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.458 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:20.458 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.461 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.461 [http-nio-8080-exec-9] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:20.512 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 16:40:20.513 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.515 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 16:40:20.515 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.517 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.517 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 16:40:20.517 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.522 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.523 [http-nio-8080-exec-7] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 16:40:20.542 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.548 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.548 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.548 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.551 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.551 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.551 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.551 [http-nio-8080-exec-5] DEBUG com.example.demo.service.CartService - 获取用户购物车: username=user
2025-06-17 16:40:20.551 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.553 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.553 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.553 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 16:40:20.553 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.553 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.554 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.555 [http-nio-8080-exec-8] INFO  com.example.demo.controller.ProfileController - 获取用户收藏列表成功: username=user, 收藏数量=1
2025-06-17 16:40:20.556 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.556 [http-nio-8080-exec-5] INFO  com.example.demo.controller.CartController - 获取购物车成功: username=user, 商品数量=0
2025-06-17 16:40:20.557 [http-nio-8080-exec-1] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.557 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.557 [http-nio-8080-exec-3] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 16:40:20.557 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 获取用户发布的帖子: username=user
2025-06-17 16:40:20.557 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 获取用户预约记录: username=user
2025-06-17 16:40:20.557 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.557 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.557 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 获取用户充值记录: username=user
2025-06-17 16:40:20.557 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 16:40:20.559 [http-nio-8080-exec-3] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.559 [http-nio-8080-exec-2] INFO  com.example.demo.controller.OrderController - 获取用户订单列表成功: username=user, 订单数量=1
2025-06-17 16:40:20.559 [http-nio-8080-exec-1] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.559 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 16:40:20.562 [http-nio-8080-exec-3] INFO  com.example.demo.controller.ProfileController - 获取充值记录成功: username=user, 记录数量=1
2025-06-17 16:40:20.562 [http-nio-8080-exec-1] INFO  com.example.demo.controller.ProfileController - 获取用户帖子列表成功: username=user, 帖子数量=4
2025-06-17 16:40:20.563 [http-nio-8080-exec-10] INFO  com.example.demo.controller.ProfileController - 获取用户预约列表成功: username=user, 预约数量=3
2025-06-17 18:27:39.338 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 18:27:39.348 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.414 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 18:27:39.424 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.427 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:27:39.427 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 18:27:39.432 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:27:39.551 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:27:39.552 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 18:27:39.861 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.862 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.861 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.865 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.866 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.866 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:27:39.866 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:27:39.868 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:27:39.868 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:27:39.868 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:27:39.868 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:27:39.869 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:27:39.872 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:27:39.872 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:27:39.872 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:27:39.873 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:27:39.873 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:27:39.874 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:27:39.876 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:27:39.876 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:27:39.876 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:27:39.877 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:27:39.880 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:27:39.881 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 18:27:39.882 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 18:27:39.882 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 18:27:39.882 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 18:27:39.882 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:27:39.883 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 18:27:39.886 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
2025-06-17 18:29:19.102 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 收到getUserInfo请求, Authorization header: Bearer eyJhbGciOiJIUzI1NiJ9.ey...
2025-06-17 18:29:19.102 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始验证token有效性, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.104 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - token验证成功: username=user, expiration=2025-06-18T12:06:44.000+0800
2025-06-17 18:29:19.104 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.106 [http-nio-8080-exec-6] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:29:19.106 [http-nio-8080-exec-6] DEBUG com.example.demo.controller.AuthController - 从token解析出用户名: user
2025-06-17 18:29:19.106 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:29:19.109 [http-nio-8080-exec-6] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:29:19.109 [http-nio-8080-exec-6] INFO  com.example.demo.controller.AuthController - 成功获取用户信息: username=user, balance=600.00
2025-06-17 18:29:19.304 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.304 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.304 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.305 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.308 [http-nio-8080-exec-8] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:29:19.308 [http-nio-8080-exec-5] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:29:19.308 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:29:19.308 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:29:19.308 [http-nio-8080-exec-7] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:29:19.308 [http-nio-8080-exec-2] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:29:19.309 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:29:19.309 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.309 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 开始解析token获取用户名, token前缀: eyJhbGciOiJIUzI1NiJ9...
2025-06-17 18:29:19.310 [http-nio-8080-exec-8] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:29:19.312 [http-nio-8080-exec-10] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:29:19.313 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:29:19.313 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:29:19.313 [http-nio-8080-exec-7] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:29:19.314 [http-nio-8080-exec-9] DEBUG com.example.demo.config.JwtUtils - 从token解析出用户名: user
2025-06-17 18:29:19.314 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 查询用户信息: username=user
2025-06-17 18:29:19.317 [http-nio-8080-exec-5] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:29:19.318 [http-nio-8080-exec-8] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=6, isFavorite=false
2025-06-17 18:29:19.321 [http-nio-8080-exec-5] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=4, isFavorite=false
2025-06-17 18:29:19.322 [http-nio-8080-exec-7] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=5, isFavorite=true
2025-06-17 18:29:19.322 [http-nio-8080-exec-9] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:29:19.326 [http-nio-8080-exec-2] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:29:19.328 [http-nio-8080-exec-10] DEBUG com.example.demo.service.UserService - 成功找到用户: username=user, userId=2
2025-06-17 18:29:19.330 [http-nio-8080-exec-2] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=1, isFavorite=false
2025-06-17 18:29:19.330 [http-nio-8080-exec-9] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=2, isFavorite=false
2025-06-17 18:29:19.331 [http-nio-8080-exec-10] DEBUG com.example.demo.controller.ForumController - 检查帖子收藏状态: username=user, postId=3, isFavorite=false
